diff --git a/Makefile.in b/Makefile.in
index df54f35..c42bffa 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -442,10 +442,7 @@ install: all install-doc install-headers
 ifeq ("@enable_static@","static")
 	$(INSTALL_DATA) -t $(inst_libdir) $(top_builddir)/$(STATIC_LIB)
 endif
-	$(INSTALL) -t $(inst_libdir) $(top_builddir)/$(SHARED_REALNAME_LIB)
 	$(INSTALL_DATA) -t $(inst_libdir) $(top_builddir)/libdecnumber/libdecnumber.a
-	ln -f -s $(SHARED_REALNAME_LIB) $(inst_libdir)/$(SHARED_LINKERNAME_LIB)
-	ln -f -s $(SHARED_REALNAME_LIB) $(inst_libdir)/$(SHARED_SONAME_LIB)
 	$(INSTALL_DATA) -D -t $(inst_libdir)/pkgconfig $(top_builddir)/libdfp.pc
 	$(INSTALL_DATA) -D -t $(inst_libdir)/pkgconfig $(top_builddir)/libdecnumber.pc
 .PHONY: install
diff --git a/configure.ac b/configure.ac
index 83b6815..d287977 100644
--- a/configure.ac
+++ b/configure.ac
@@ -191,23 +191,6 @@ EOF
   rm -f conftest*])
 AC_SUBST(libdfp_cv_cc_with_decimal_float)
 
-# Check for GLIBC 2.10 headers
-have_glibc_2_10_headers=yes
-AC_MSG_CHECKING([for printf-hook register_printf_type() in printf.h to verify GLIBC 2.10])
-AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include "printf.h"]], [[
- void foo_va (void *mem, va_list *ap)
- {
-   return;
- }
- register_printf_type (foo_va);
- ]])],[AC_MSG_RESULT([yes])],[AC_MSG_RESULT([no]); have_glibc_2_10_headers=no])
-
-if test x$have_glibc_2_10_headers != xyes; then
-  AC_MSG_ERROR([Building Libdfp requires a GLIBC printf.h header that
-		provides the register_printf_type() function which is
-		available in GLIBC Version 2.10 or later.])
-fi
-
 # Check for std::decimal compiler support
 AC_CACHE_CHECK(for std::decimal, libdfp_cv_cxxdecimal,
   [AC_LANG_SAVE
@@ -516,9 +499,6 @@ AC_TRY_COMPILE([#include <stdio.h>
 #if !defined __GNUC__ || __GNUC__ < ${gcc_min} || (__GNUC__ == ${gcc_min} && __GNUC_MINOR__ < ${gcc_min_minor})
 #error insufficient compiler
 #endif
-#if !__GLIBC_PREREQ (${glibc_min}, ${glibc_min_minor})
-# error insufficient glibc version
-#endif
 ${gcc_extra}],
            [libc_cv_compiler_ok=yes],
            [libc_cv_compiler_ok=no])])
diff --git a/dfp/bits/dfp_dmathcalls.h b/dfp/bits/dfp_dmathcalls.h
index 1112876..d1628f6 100644
--- a/dfp/bits/dfp_dmathcalls.h
+++ b/dfp/bits/dfp_dmathcalls.h
@@ -22,6 +22,7 @@
 
 /* No guarantees are made about the macros in this header.
    Use it directly at your own risk!. */
+#include <stdlib.h>
 
 __DECL_D(acos, (__DECIMAL), __THROW)
 __DECL_D(acosh, (__DECIMAL), __THROW)
diff --git a/dfp/fenv.h b/dfp/fenv.h
index f3447a0..4b7fc16 100644
--- a/dfp/fenv.h
+++ b/dfp/fenv.h
@@ -35,6 +35,7 @@
 #ifdef __STDC_WANT_DEC_FP__
 
 #include <features.h>
+#include <stdlib.h>
 
 /* Power6[x] chips support all five of the defined rounding modes [and then
  * some].  We use the bit pattern in the Power6[x] FPSCR as the values for the
diff --git a/dfp/math.h b/dfp/math.h
index 353d348..c383bdc 100644
--- a/dfp/math.h
+++ b/dfp/math.h
@@ -41,10 +41,21 @@
 #ifdef __STDC_WANT_DEC_FP__
 
 #include <stdbool.h>
+#include <stdlib.h>
 
 /* math.h provides prototypes for the classification macros below. */
 #include <math.h>
 
+#define FP_LLOGB0 INT64_MIN
+#define FP_LLOGBNAN FP_LLOGB0
+#define DEC32_SUBNORMAL_MIN __DEC32_SUBNORMAL_MIN__
+#define DEC64_SUBNORMAL_MIN __DEC64_SUBNORMAL_MIN__
+#define DEC128_SUBNORMAL_MIN __DEC128_SUBNORMAL_MIN__
+#define DEC32_MAX __DEC32_MAX__
+#define DEC64_MAX __DEC64_MAX__
+#define DEC128_MAX __DEC128_MAX__
+#define MATH_ERREXCEPT 2
+
 #define DEC_INFINITY	__builtin_infd32()
 #define DEC_NAN		__builtin_nand32("")
 #define HUGE_VAL_D32	__builtin_infd32()
@@ -154,13 +165,13 @@ __END_DECLS
 
 #define __dfp_isinf(x) \
      (sizeof (x) == sizeof (float)					      \
-      ? __isinff (x)							      \
-      : __dfp_ldbl(__isinf, x))
+      ? __builtin_isinf (x)							      \
+      : __dfp_ldbl(__builtin_isinf, x))
 
 #define __dfp_isnan(x) \
      (sizeof (x) == sizeof (float)		      			      \
-      ? __isnanf (x)				      			      \
-      : __dfp_ldbl(__isnan, x))
+      ? __builtin_isnan (x)				      			      \
+      : __dfp_ldbl(__builtin_isnan, x))
 
 /* A special case here.  Older glibc may not support this.  */
 #ifdef issignaling
diff --git a/dfp/stdlib.h b/dfp/stdlib.h
index 24100ee..defb75a 100644
--- a/dfp/stdlib.h
+++ b/dfp/stdlib.h
@@ -26,6 +26,10 @@
 #ifndef _DFP_STDLIB_H
 #define _DFP_STDLIB_H 1
 
+#define __THROW libcesque
+#define __attribute_const__ pureconst
+#define __nonnull paramsnonnull
+
 #ifdef __STDC_WANT_DEC_FP__
 
 #include <features.h>
diff --git a/dfp/wchar.h b/dfp/wchar.h
index c5e7b6f..697fb2a 100644
--- a/dfp/wchar.h
+++ b/dfp/wchar.h
@@ -29,6 +29,7 @@
 
 #include <features.h>
 #include <stddef.h>
+#include <stdlib.h>
 
 __BEGIN_DECLS
 extern _Decimal32 wcstod32 (__const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr) __THROW;
diff --git a/include/fmt_dfp.h b/include/fmt_dfp.h
index 0a606d3..6d86933 100644
--- a/include/fmt_dfp.h
+++ b/include/fmt_dfp.h
@@ -27,7 +27,8 @@
 #define _FMT_DFP_H 1
 
 #include <features.h>
-#include <printf.h>
+#include <printf_dfp.h>
+
 
 __BEGIN_DECLS
 
diff --git a/include/printf_dfp.h b/include/printf_dfp.h
index a2a6b36..1b0e576 100644
--- a/include/printf_dfp.h
+++ b/include/printf_dfp.h
@@ -26,7 +26,6 @@
 #ifndef	_PRINTF_DFP_H
 
 #define	_PRINTF_DFP_H	1
-#include <printf.h>
 
 #define DFP_FLAG_DECIMAL_32	(1<<16)
 #define DFP_FLAG_DECIMAL_64	(1<<17)
@@ -34,6 +33,21 @@
 
 #include <stdarg.h>
 
+struct printf_info {
+    int            prec;
+    int            width;
+    wchar_t        spec;
+    unsigned int   alt:1;
+    unsigned int   space:1;
+    unsigned int   left:1;
+    unsigned int   showsign:1;
+    unsigned int   group:1;
+    unsigned int   extra:1;
+    unsigned int   wide:1;
+    unsigned short user;
+    wchar_t        pad;
+};
+
 /* Internal entry point for formatting DFP.  */
 extern int __printf_dfp (FILE *, const struct printf_info *,
 			 const void *const *);
@@ -47,12 +61,6 @@ hidden_proto (__d64_va)
 extern void __d32_va (void *mem, va_list *ap);
 hidden_proto (__d32_va)
 
-extern int __dfp_ais (const struct printf_info *info, size_t n, int *argtype, int *size);
-hidden_proto (__dfp_ais)
-
-extern int __register_printf_dfp (void);
-hidden_proto(__register_printf_dfp)
-
 /* Modifiers for re-using printf hook as strfromdN */
 extern int mod_H;
 extern int mod_D;
diff --git a/libbid/bid_decimal_globals.c b/libbid/bid_decimal_globals.c
index 5ce0655..8d0136d 100644
--- a/libbid/bid_decimal_globals.c
+++ b/libbid/bid_decimal_globals.c
@@ -92,7 +92,7 @@ __dfp_set_status (int excepts) {
   _IDEC_glbflags |= excepts;
   if (excepts == INEXACT_EXCEPTION)
     {
-      fesetexcept (FE_INEXACT);
+      feraiseexcept (FE_INEXACT);
     }
   else
     {
@@ -101,7 +101,7 @@ __dfp_set_status (int excepts) {
       fexcepts = (excepts & UNDERFLOW_EXCEPTION) ? FE_UNDERFLOW : 0;
       fexcepts = (excepts & ZERO_DIVIDE_EXCEPTION) ? FE_DIVBYZERO : 0;
       fexcepts = (excepts & INVALID_EXCEPTION) ? FE_INVALID: 0;
-      fesetexcept (fexcepts);
+      feraiseexcept (fexcepts);
     }
 }
 #endif
diff --git a/printf-hooks/printf_dfp.c b/printf-hooks/printf_dfp.c
index bdaca0f..81b2aef 100644
--- a/printf-hooks/printf_dfp.c
+++ b/printf-hooks/printf_dfp.c
@@ -266,10 +266,6 @@ padn (FILE *fp, int pad, int count)
       OUT("decpt",dpt); \
    } while (0)
 
-static int pa_d128;
-static int pa_d64;
-static int pa_d32;
-
 /* Assign these a unique 2^n value in case printf registration is not used
    as this support is used to implement strfromdN.  */
 int mod_H = 1;
@@ -303,33 +299,6 @@ __d32_va (void *mem, va_list *ap)
 strong_alias(__d32_va, d32_va)
 hidden_def(__d32_va)
 
-int
-__dfp_ais (const struct printf_info *info, size_t n __attribute__ ((unused)), int *argtype, int *size)
-{
-  if ((info->user & mod_D) == mod_D)
-    {
-      argtype[0] = pa_d64;
-      size[0] = sizeof (_Decimal64);
-      return 1;
-    }
-  else if ((info->user & mod_DD) == mod_DD)
-    {
-      argtype[0] = pa_d128;
-      size[0] = sizeof (_Decimal128);
-      return 1;
-    }
-  else if ((info->user & mod_H) == mod_H)
-    {
-      argtype[0] = pa_d32;
-      size[0] = sizeof (_Decimal32);
-      return 1;
-    }
-
-  return -1;
-}
-strong_alias(__dfp_ais, dfp_ais)
-hidden_def(__dfp_ais)
-
 #define EXP_BIAS_D128 -6109
 #define EXP_BIAS_D64  -368
 #define EXP_BIAS_D32  -87
@@ -366,18 +335,18 @@ __printf_dfp (FILE *fp,
 
   if (info->extra == 0)
     {
-      decimal = nl_langinfo (__DECIMAL_POINT);
-      decimalwc.mb = nl_langinfo (_NL_NUMERIC_DECIMAL_POINT_WC);
+      decimal = nl_langinfo (RADIXCHAR);
+      decimalwc.mb = nl_langinfo (RADIXCHAR);
     }
   else
     {
-      decimal = nl_langinfo (__MON_DECIMAL_POINT);
+      decimal = localeconv()->mon_decimal_point;
       if (*decimal == '\0')
-	decimal = nl_langinfo (__DECIMAL_POINT);
+	decimal = nl_langinfo (RADIXCHAR);
 
-      decimalwc.mb = nl_langinfo (_NL_MONETARY_DECIMAL_POINT_WC);
+      decimalwc.mb = localeconv()->mon_decimal_point;
       if (decimalwc.wc == L'\0')
-	decimalwc.mb = nl_langinfo (_NL_NUMERIC_DECIMAL_POINT_WC);
+	decimalwc.mb = nl_langinfo (RADIXCHAR);
     }
   /* The decimal point character must not be zero.  */
   assert (*decimal != '\0');
@@ -386,9 +355,9 @@ __printf_dfp (FILE *fp,
   if (info->group)
     {
       if (info->extra == 0)
-	grouping = nl_langinfo (__GROUPING);
+	grouping = localeconv()->grouping;
       else
-	grouping = nl_langinfo (__MON_GROUPING);
+	grouping = localeconv()->mon_grouping;
 
       if (*grouping <= 0 || *grouping == CHAR_MAX)
 	grouping = NULL;
@@ -399,21 +368,21 @@ __printf_dfp (FILE *fp,
 	    {
 	      if (info->extra == 0)
 		{
-		  thousands_sepmb = nl_langinfo (_NL_NUMERIC_THOUSANDS_SEP_WC);
+		  thousands_sepmb = nl_langinfo (THOUSEP);
 		  mbrtowc(&thousands_sepwc,thousands_sepmb, CHAR_MAX, NULL);
 		}
 	      else
 		{
-		  thousands_sepmb = nl_langinfo (_NL_MONETARY_THOUSANDS_SEP_WC);
+		  thousands_sepmb = localeconv()->mon_thousands_sep;
 		  mbrtowc(&thousands_sepwc,thousands_sepmb, CHAR_MAX, NULL);
 		}
 	    }
 	  else
 	    {
 	      if (info->extra == 0)
-		thousands_sep = nl_langinfo (__THOUSANDS_SEP);
+		thousands_sep = nl_langinfo (THOUSEP);
 	      else
-		thousands_sep = nl_langinfo (__MON_THOUSANDS_SEP);
+		thousands_sep = localeconv()->mon_thousands_sep;
 	    }
 
 	  if ((wide && thousands_sepwc == L'\0')
@@ -875,27 +844,3 @@ __printf_dfp (FILE *fp,
 }
 strong_alias (__printf_dfp, printf_dfp)
 hidden_def (__printf_dfp)
-
-int __register_printf_dfp (void)
-{
-  pa_d128 = register_printf_type (d128_va);
-  pa_d32 = register_printf_type (d32_va);
-  pa_d64 = register_printf_type (d64_va);
-
-  mod_DD = register_printf_modifier (L"DD");
-  mod_H = register_printf_modifier (L"H");
-  mod_D = register_printf_modifier (L"D");
-
-  register_printf_specifier ('f', printf_dfp, dfp_ais);
-  register_printf_specifier ('F', printf_dfp, dfp_ais);
-  register_printf_specifier ('e', printf_dfp, dfp_ais);
-  register_printf_specifier ('E', printf_dfp, dfp_ais);
-  register_printf_specifier ('g', printf_dfp, dfp_ais);
-  register_printf_specifier ('G', printf_dfp, dfp_ais);
-  register_printf_specifier ('a', printf_dfp, dfp_ais);
-  register_printf_specifier ('A', printf_dfp, dfp_ais);
-
-  return 0;
-}
-strong_alias (__register_printf_dfp, register_printf_dfp)
-hidden_def (__register_printf_dfp)
diff --git a/stdlib/strfromd32.c b/stdlib/strfromd32.c
index f66a1c5..2ef489f 100644
--- a/stdlib/strfromd32.c
+++ b/stdlib/strfromd32.c
@@ -22,7 +22,6 @@
 
 #include <stdlib.h>
 #include <stdio.h>
-#include <printf.h>
 #include <errno.h>
 #include <ctype.h>
 
@@ -38,7 +37,7 @@ FUNC_NAME (char * __restrict s, size_t n, const char * __restrict format, DECIMA
 {
   /* format = %{[.][0-9]*[aAeEfFgG], else behavior undefined.
      Reuse our printf hook to do this.  */
-  FILE * f = fmemopen (s, n, "w");
+  FILE * f = fmemopen (s, n, "w+");
   const void * const args = &fp;
   const void * const * argsp = &args;
   const void * const * argp = (const void * const *)&argsp;
diff --git a/stdlib/strtod32.c b/stdlib/strtod32.c
index 155bd68..d26e291 100644
--- a/stdlib/strtod32.c
+++ b/stdlib/strtod32.c
@@ -76,6 +76,10 @@
 # define __DEC_MIN_EXP__ __DEC32_MIN_EXP__
 #endif
 
+#define __locale_t locale_t
+#define isspace_l(c, l) isspace(c)
+#define wcsncasecmp_l(ws1, ws2, n, l) wcsncasecmp(ws1, ws2, n)
+
 #define DEC_TYPE	FLOAT
 #define _DECIMAL_SIZE	FLOAT_SIZE
 #include <numdigits.h>
@@ -366,20 +370,20 @@ FUNCTION_L_INTERNAL (const STRING_TYPE * nptr, STRING_TYPE ** endptr,
   if (group)
     {
       //grouping = _NL_CURRENT (LC_NUMERIC, GROUPING);
-      grouping = nl_langinfo (__GROUPING);
+      grouping = localeconv()->grouping;
       if (*grouping <= 0 || *grouping == CHAR_MAX)
 	grouping = NULL;
       else
 	{
 	  /* Figure out the thousands separator character.  */
 #ifdef USE_WIDE_CHAR
-	  thousandsmb = nl_langinfo(_NL_NUMERIC_THOUSANDS_SEP_WC);
+	  thousandsmb = nl_langinfo (THOUSEP);
 	  mbrtowc(&thousands,thousandsmb, CHAR_MAX, NULL);
 
 	  if (thousands == L'\0')
 	    grouping = NULL;
 #else
-	  thousands = nl_langinfo (__THOUSANDS_SEP);
+	  thousands = nl_langinfo (THOUSEP);
 	  if (*thousands == '\0')
 	    {
 	      thousands = NULL;
@@ -393,13 +397,13 @@ FUNCTION_L_INTERNAL (const STRING_TYPE * nptr, STRING_TYPE ** endptr,
 
   /* Find the locale's decimal point character.  */
 #ifdef USE_WIDE_CHAR
-  decimalmb = nl_langinfo(_NL_NUMERIC_DECIMAL_POINT_WC);
+  decimalmb = nl_langinfo(RADIXCHAR);
   mbrtowc(&decimal,decimalmb, CHAR_MAX, NULL);
   assert (decimal != L'\0');
 # define decimal_len 1
 #else
  // decimal = _NL_CURRENT (LC_NUMERIC, DECIMAL_POINT);
-  decimal = nl_langinfo(__DECIMAL_POINT);
+  decimal = nl_langinfo(RADIXCHAR);
   decimal_len = strlen (decimal);
   assert (decimal_len > 0);
 #endif
